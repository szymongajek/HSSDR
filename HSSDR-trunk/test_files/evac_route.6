# czy dwie pary drzwi prowadzą do tego samego pokoju
doorsInTheSameRoom(d1, d2)  <=>  exists r in Rooms:
   doorsInRoom(d1, r) and doorsInRoom(d2, r);

# zbiór drzwi prowadzących na zewnątrz
ExternalDoor(d) <=> Door(d) and ( forall x, y in Rooms:  
 doorsInRoom(d, x) and doorsInRoom(d, y) => x = y );
# zbiór drzwi ewakuacyjnych
 EvacuationDoors(d) <=> exists p in Rooms:
  doorsInRoom(d, p) and ( type(p) = "Staircase" or type(p) = "Corridor" );
  # zbiór pomieszczen o typie będącym drogą ewakuacyjną
 EvacuationRoute(p) <=>  Room(p) and ( type(p) = "Staircase" or type(p) = "Corridor");
 
aux1(d, x) <=> EvacuationDoors(d) and 
(   exists d2 in Doors: d2!=d and ExternalDoor(d2) and doorsInTheSameRoom(d, d2) and x >= doorsDist(d, d2) );
aux2(d, x) <=>EvacuationDoors(d) and 
(   exists d2 in Doors: aux1(d2,x) and d2!=d and doorsInTheSameRoom(d, d2) and x >= doorsDist(d, d2) );
aux3(d, x) <=>EvacuationDoors(d) and 
(   exists d2 in Doors: aux2(d2,x) and d2!=d and doorsInTheSameRoom(d, d2) and x >= doorsDist(d, d2) );
aux4(d, x) <=>EvacuationDoors(d) and 
(   exists d2 in Doors: aux3(d2,x) and d2!=d and doorsInTheSameRoom(d, d2) and x >= doorsDist(d, d2) );

ValidEvacRouteDoors(d) <=>ExternalDoor(d) or  aux1(d, 30) or aux2(d, 30) or aux3(d, 30) or aux4(d, 30);

# zbiór pokoi, w których znajdują się drzwi prowadzące na drogę ewakuacyjną
steps0(r) <=>  !  EvacuationRoute(r)  and ( exists d in ValidEvacRouteDoors: doorsInRoom(d, r) );
# zbiór tych, gdzie trzeba przejść przez co najwyżej n pośrednich pokoi
steps1(r) <=> steps0(r) or (exists r2 in steps0: accessible(r, r2));
steps2(r) <=> steps1(r) or (exists r2 in steps1: accessible(r, r2));
 

# zbiór pokoi mających prawidłową access path prowadzącą do prawidłowej
# evacuation route prowadzącej do innej sekcji budynku albo na zewnątrz
ValidRooms(r) <=> steps2(r);

# finalny test
success_msg "wszystkie pokoje ok"
failure_msg "pokój nie spełnia warunków"

forall r in Rooms: ValidRooms(r)
