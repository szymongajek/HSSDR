	# zbiór drzwi łączących ze sobą różne strefy budynku
ZoneDoors(d) <=> exists r in Rooms: doorsInRoom(d, r) and  type(r) = "Staircase";
	# zbiór drzwi zapewniajacych bezpieczenstwo po drugiej stronie
FireSafetyDoors(d) <=>   ExternalDoors(d) or ZoneDoors(d)  ;
   
	# pokoje stanowiace odrebne strefy pozarowe - bezpieczne
ZoneRooms(r) <=> Rooms(r) and (type(r) = "Staircase");   
	# pomieszczenia, z których może być zbudowana evacuation route
EvacRoute(r) <=> Rooms(r) and (type(r) = "Corridor" or type(r) = "Hall");
	# pomieszczenia do codziennego uzytku stanowiace access path
AccessPath(r) <=> Rooms(r) and !ZoneRooms(r) and !EvacRoute(r);
  
validRouteFromAdj(d, x) <=>  Doors(d) and  ( exists d2 in Doors : d2!=d and FireSafetyDoors(d2) and
( exists p in Rooms:  doorsInRoom(d2,p) and doorsInRoom(d,p) and EvacRoute(p) and  x>=doorsDist(d, d2)  ));
  
  # zbior pokoi odleglych od drzewi d o dystans okreslony w param, przechodzacych przez n pokoi
validRouteFromInduction(d, x, n)<=>   
 (n = 1 and validRouteFromAdj(d, x) ) or
 (n <> 1 and Doors(d) and validRouteFromInduction(d, x, n-1))or
 (n <> 1 and Doors(d) and exists d2 in Doors :  d2!=d and
 	(  exists p in Rooms:  
	   		doorsInRoom(d2,p) and 
	   		doorsInRoom(d,p) and 
	   		EvacRoute(p) and 
	   		 x>=doorsDist(d, d2)
	   )  and
 	   validRouteFromInduction(d2, x - doorsDist(d, d2), n-1)
	   
 ) ;


validRouteFrom(d, x) <=> validRouteFromInduction(d, x, 9);

ValidEvacRouteDoors(d) <=>FireSafetyDoors(d) or  validRouteFrom(d, 30);

ValidEvacRouteRooms(r) <=> EvacRoute(r) and ( exists d in ValidEvacRouteDoors: doorsInRoom(d, r) );
 

failure_msg "some rooms do not fulfill fire safety constraints"
forall r in Rooms: ValidEvacRouteRooms(r)
